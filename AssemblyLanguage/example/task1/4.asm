.MODEL SMALL
.STACK 100H
.DATA
    numbers DW 10 DUP(?)
    num1 DW 0
    num2 DW 0
    num3 DW 0
    newline DB 0DH, 0AH, '$'

.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX

    MOV CX, 10
    MOV SI, 0
INPUT_LOOP:
    CALL READ_INT
    MOV numbers[SI], AX
    ADD SI, 2
    LOOP INPUT_LOOP

    CALL COUNT_NUMBERS

    MOV DX, OFFSET newline
    MOV AH, 09H
    INT 21H
    CALL PRINT_NUM1
    MOV DX, OFFSET newline
    MOV AH, 09H
    INT 21H
    CALL PRINT_NUM2
    MOV DX, OFFSET newline
    MOV AH, 09H
    INT 21H
    CALL PRINT_NUM3

    MOV AH, 4CH
    INT 21H
MAIN ENDP

READ_INT PROC
    MOV CX, 0
    MOV AX, 0
    MOV SI, 0
NEXT_DIGIT:
    MOV AH, 01H
    INT 21H
    CMP AL, 0DH
    JE END_INPUT
    SUB AL, '0'
    MOV DX, CX
    MOV CX, 10
    MUL CX
    ADD AX, DX
    JMP NEXT_DIGIT
END_INPUT:
    RET
READ_INT ENDP

COUNT_NUMBERS PROC
    MOV CX, 10
    MOV SI, 0
    MOV num1, 0
    MOV num2, 0
    MOV num3, 0

CHECK_LOOP:
    MOV AX, numbers[SI]
    CMP AX, 60
    JL INCREMENT_NUM1
    CMP AX, 80
    JL INCREMENT_NUM2
    INC num3
    JMP SKIP_INCREMENT
INCREMENT_NUM1:
    INC num1
    JMP SKIP_INCREMENT
INCREMENT_NUM2:
    INC num2
SKIP_INCREMENT:
    ADD SI, 2
    LOOP CHECK_LOOP
    RET
COUNT_NUMBERS ENDP

PRINT_NUM1 PROC
    MOV AX, num1
    CALL PRINT_INT
    RET
PRINT_NUM1 ENDP

PRINT_NUM2 PROC
    MOV AX, num2
    CALL PRINT_INT
    RET
PRINT_NUM2 ENDP

PRINT_NUM3 PROC
    MOV AX, num3
    CALL PRINT_INT
    RET
PRINT_NUM3 ENDP

PRINT_INT PROC
    MOV CX, 0
    MOV BX, 10
CONVERT_LOOP:
    MOV DX, 0
    DIV BX
    PUSH DX
    INC CX
    CMP AX, 0
    JNE CONVERT_LOOP
PRINT_LOOP:
    POP DX
    ADD DL, '0'
    MOV AH, 02H
    INT 21H
    LOOP PRINT_LOOP
    RET
PRINT_INT ENDP

END MAIN